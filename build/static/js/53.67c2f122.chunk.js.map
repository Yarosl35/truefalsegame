{"version":3,"file":"static/js/53.67c2f122.chunk.js","mappings":"2LAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,G,sBIJ9F,EAAuB,mBAAvB,EAAwD,0B,4CCAxD,EAA2B,2BAA3B,EAAuE,iCAAvE,EAA+G,uB,kBCoB/G,EAhBiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACtBC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UACFG,GAAUC,EAAAA,EAAAA,GAAkBJ,EAAUD,GAAeM,UAC3D,OACE,iBAAKC,UAAWC,EAAhB,WACE,qBAASD,UAAWC,EAApB,WACE,cAAGC,IAAKL,EAASG,UAAWC,KAC5B,4BACE,mBAAQE,QAASX,EAAjB,mBACA,mBAAQW,QAASX,EAAjB,0BAGJ,eAAGQ,UAAWC,EAAd,UAA6BR,EAAgB,EAA7C,gBCwBN,EAhCa,WACX,IAAMW,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTb,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UACR,GAA2Cc,EAAAA,EAAAA,UAAS,GAApD,eAAOf,EAAP,KAAsBgB,EAAtB,KACA,GAA8BD,EAAAA,EAAAA,UAAS,IAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAiBA,OACE,iBAAKX,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SACGP,EAAUD,GAAemB,YAE5B,SAAC,EAAD,CAAUpB,WApBK,SAACqB,GAClB,IACMC,EAAa,CACjBC,gBAFqBF,EAAEG,OAAOC,YAGTvB,EAAUD,GAAeyB,eAC9CC,aAAczB,EAAUD,GAAeM,UAEnB,IAAlBN,IACFW,EAASgB,EAAAA,EAAAA,WAA4BV,IACrCJ,EAASe,EAAAA,EAAAA,cAEXV,GAAW,SAACW,GAAD,kBAAqBA,GAArB,CAAkCR,OAC7CL,GAAkB,SAACc,GAAD,OAAeA,EAAY,MAQT9B,cAAeA,S,iEClC1CK,EAAoB,SAAC0B,GAChC,IAAM3B,GAAU4B,EAAAA,EAAAA,UAIhB,OAHAC,EAAAA,EAAAA,YAAU,WACR7B,EAAQ8B,QAAQV,UAAYO,IAC3B,CAACA,IACG3B","sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://trivia-app-test/./src/pages/Quiz/Quiz.module.scss?3844","webpack://trivia-app-test/./src/components/GameCard/GameCard.module.scss?9741","components/GameCard/index.jsx","pages/Quiz/index.jsx","utils/hooks.js"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"Quiz\":\"Quiz_Quiz__FLI5f\",\"Quiz__title\":\"Quiz_Quiz__title__6aSYu\"};","// extracted by mini-css-extract-plugin\nexport default {\"GameCard\":\"GameCard_GameCard__2+KZ8\",\"GameCard__card\":\"GameCard_GameCard__card__f+VpR\",\"text\":\"GameCard_text__Cm5Jr\"};","import { useSelector } from \"react-redux\";\nimport classes from \"./GameCard.module.scss\";\nimport { questionsData } from \"../../utils/getReducers\";\nimport { useFormatTextHook } from \"../../utils/hooks\";\n\nconst GameCard = ({ saveAnswer, questionIndex }) => {\n  const { questions } = useSelector(questionsData);\n  const textRef = useFormatTextHook(questions[questionIndex].question);\n  return (\n    <div className={classes.GameCard}>\n      <section className={classes.GameCard__card}>\n        <p ref={textRef} className={classes.text}></p>\n        <div>\n          <button onClick={saveAnswer}>True</button>\n          <button onClick={saveAnswer}>False</button>\n        </div>\n      </section>\n      <p className={classes.text}>{questionIndex + 1} of 10</p>\n    </div>\n  );\n};\nexport default GameCard;\n","import { useState } from \"react\";\nimport classes from \"./Quiz.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { questionsData } from \"../../utils/getReducers\";\nimport { questionsActions } from \"../../store/questionsSlice\";\nimport routes from \"../../routes\";\nimport GameCard from \"../../components/GameCard\";\n\nconst Quiz = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { questions } = useSelector(questionsData);\n  const [questionIndex, setQuiestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n\n  const saveAnswer = (e) => {\n    const responseOption = e.target.innerHTML;\n    const answerData = {\n      isCorrectAnswer:\n        responseOption === questions[questionIndex].correct_answer,\n      questionText: questions[questionIndex].question,\n    };\n    if (questionIndex === 9) {\n      dispatch(questionsActions.setAnswers(answers));\n      navigate(routes.resultspage);\n    }\n    setAnswers((prevAnswers) => [...prevAnswers, answerData]);\n    setQuiestionIndex((prevIndex) => prevIndex + 1);\n  };\n\n  return (\n    <div className={classes.Quiz}>\n      <h1 className={classes.Quiz__title}>\n        {questions[questionIndex].category}\n      </h1>\n      <GameCard saveAnswer={saveAnswer} questionIndex={questionIndex} />\n    </div>\n  );\n};\n\nexport default Quiz;\n","import { useRef, useEffect } from \"react\";\n\nexport const useFormatTextHook = (elemText) => {\n  const textRef = useRef();\n  useEffect(() => {\n    textRef.current.innerHTML = elemText;\n  }, [elemText]);\n  return textRef;\n};\n"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","saveAnswer","questionIndex","questions","useSelector","questionsData","textRef","useFormatTextHook","question","className","classes","ref","onClick","dispatch","useDispatch","navigate","useNavigate","useState","setQuiestionIndex","answers","setAnswers","category","e","answerData","isCorrectAnswer","target","innerHTML","correct_answer","questionText","questionsActions","routes","prevAnswers","prevIndex","elemText","useRef","useEffect","current"],"sourceRoot":""}